var searchIndex = {};
searchIndex['tree'] = {"items":[[0,"","tree","A collection based on a binary search tree."],[0,"map","","An ordered map based on a binary search tree."],[3,"TreeMap","tree::map","An ordered map based on a binary search tree."],[3,"IntoIter","","An iterator that consumes the map."],[3,"Iter","","An iterator over the map's entries with immutable references to the values."],[3,"IterMut","","An iterator over the map's entries with mutable references to the values."],[3,"IntoRange","","An iterator that consumes the map, yielding only those entries whose keys lie in a given range."],[3,"Range","","An iterator over the map's entries whose keys lie in a given range with immutable references to\nthe values."],[3,"RangeMut","","An iterator over the map's entries whose keys lie in a given range with mutable references to\nthe values."],[11,"arbitrary","","",0],[11,"shrink","","",0],[11,"clone","","",0],[11,"new","","Creates an empty map ordered according to the natural order of its keys.",0],[11,"with_cmp","","Creates an empty map ordered according to the given comparator.",0],[11,"is_empty","","Checks if the map is empty.",0],[11,"len","","Returns the number of entries in the map.",0],[11,"cmp","","Returns a reference to the map's comparator.",0],[11,"clear","","Removes all entries from the map.",0],[11,"insert","","Inserts an entry into the map, returning the previous value, if any, associated\nwith the key.",0],[11,"remove","","Removes and returns the entry whose key is equal to the given key, returning\n`None` if the map does not contain the key.",0],[11,"contains_key","","Checks if the map contains the given key.",0],[11,"get","","Returns a reference to the value associated with the given key, or `None` if the\nmap does not contain the key.",0],[11,"get_mut","","Returns a mutable reference to the value associated with the given key, or `None`\nif the map does not contain the key.",0],[11,"max","","Returns a reference to the map's maximum key and a reference to its associated\nvalue, or `None` if the map is empty.",0],[11,"max_mut","","Returns a reference to the map's maximum key and a mutable reference to its\nassociated value, or `None` if the map is empty.",0],[11,"min","","Returns a reference to the map's minimum key and a reference to its associated\nvalue, or `None` if the map is empty.",0],[11,"min_mut","","Returns a reference to the map's minimum key and a mutable reference to its\nassociated value, or `None` if the map is empty.",0],[11,"pred","","Returns a reference to the greatest key that is strictly less than the given key and a\nreference to its associated value, or `None` if no such key is present in the map.",0],[11,"pred_mut","","Returns a reference to the greatest key that is strictly less than the given key and a\nmutable reference to its associated value, or `None` if no such key is present in the map.",0],[11,"pred_or_eq","","Returns a reference to the greatest key that is less than or equal to the given key and a\nreference to its associated value, or `None` if no such key is present in the map.",0],[11,"pred_or_eq_mut","","Returns a reference to the greatest key that is less than or equal to the given key and a\nmutable reference to its associated value, or `None` if no such key is present in the map.",0],[11,"succ","","Returns a reference to the smallest key that is strictly greater than the given key and a\nreference to its associated value, or `None` if no such key is present in the map.",0],[11,"succ_mut","","Returns a reference to the smallest key that is strictly greater than the given key and a\nmutable reference to its associated value, or `None` if no such key is present in the map.",0],[11,"succ_or_eq","","Returns a reference to the smallest key that is greater than or equal to the given key and\na reference to its associated value, or `None` if no such key is present in the map.",0],[11,"succ_or_eq_mut","","Returns a reference to the smallest key that is greater than or equal to the given key and\na mutable reference to its associated value, or `None` if no such key is present in the\nmap.",0],[11,"into_iter","","Returns an iterator that consumes the map.",0],[11,"iter","","Returns an iterator over the map's entries with immutable references to the values.",0],[11,"iter_mut","","Returns an iterator over the map's entries with mutable references to the values.",0],[11,"into_range","","Returns an iterator that consumes the map, yielding only those entries whose keys lie in\nthe given range.",0],[11,"range","","Returns an iterator over the map's entries whose keys lie in the given range with immutable\nreferences to the values.",0],[11,"range_mut","","Returns an iterator over the map's entries whose keys lie in the given range with mutable\nreferences to the values.",0],[11,"fmt","","",0],[11,"default","","",0],[11,"extend","","",0],[11,"from_iter","","",0],[11,"hash","","",0],[6,"Output","",""],[11,"index","","",0],[11,"index_mut","","",0],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","","",0],[11,"eq","","",0],[11,"partial_cmp","","",0],[11,"cmp","","",0],[11,"clone","","",1],[6,"Item","",""],[11,"next","","",1],[11,"size_hint","","",1],[11,"next_back","","",1],[11,"clone","","",2],[6,"Item","",""],[11,"next","","",2],[11,"size_hint","","",2],[11,"next_back","","",2],[6,"Item","",""],[11,"next","","",3],[11,"size_hint","","",3],[11,"next_back","","",3],[11,"clone","","",4],[6,"Item","",""],[11,"next","","",4],[11,"size_hint","","",4],[11,"next_back","","",4],[11,"clone","","",5],[6,"Item","",""],[11,"next","","",5],[11,"size_hint","","",5],[11,"next_back","","",5],[6,"Item","",""],[11,"next","","",6],[11,"size_hint","","",6],[11,"next_back","","",6],[0,"set","tree","An ordered set based on a binary search tree."],[3,"TreeSet","tree::set","An ordered set based on a binary search tree."],[3,"IntoIter","","An iterator that consumes the set."],[3,"Iter","","An iterator over the set."],[3,"IntoRange","","An iterator that consumes the set, yielding only those items that lie in a given range."],[3,"Range","","An iterator over the set's items that lie in a given range."],[11,"clone","","",7],[11,"new","","Creates an empty set ordered according to the natural order of its items.",7],[11,"with_cmp","","Creates an empty set ordered according to the given comparator.",7],[11,"is_empty","","Checks if the set is empty.",7],[11,"len","","Returns the number of items in the set.",7],[11,"cmp","","Returns a reference to the set's comparator.",7],[11,"clear","","Removes all items from the set.",7],[11,"insert","","Inserts an item into the set, returning `true` if the set did not already contain the item.",7],[11,"remove","","Removes the given item from the set, returning `true` if the set contained the item.",7],[11,"contains","","Checks if the set contains the given item.",7],[11,"max","","Returns a reference to the set's maximum item, or `None` if the set is empty.",7],[11,"min","","Returns a reference to the set's minimum item, or `None` if the set is empty.",7],[11,"pred","","Returns a reference to the greatest item that is strictly less than the given item, or\n`None` if no such item is present in the set.",7],[11,"pred_or_eq","","Returns a reference to the greatest item that is less than or equal to the given item, or\n`None` if no such item is present in the ste.",7],[11,"succ","","Returns a reference to the smallest item that is strictly greater than the given item, or\n`None` if no such item is present in the set.",7],[11,"succ_or_eq","","Returns a reference to the smallest item that is greater than or equal to the given item,\nor `None` if no such item is present in the set.",7],[11,"into_iter","","Returns an iterator that consumes the set.",7],[11,"iter","","Returns an iterator over the set.",7],[11,"into_range","","Returns an iterator that consumes the set, yielding only those items that lie in the given\nrange.",7],[11,"range","","Returns an iterator over the set's items that lie in the given range.",7],[11,"fmt","","",7],[11,"default","","",7],[11,"extend","","",7],[11,"from_iter","","",7],[11,"hash","","",7],[11,"eq","","",7],[11,"partial_cmp","","",7],[11,"cmp","","",7],[11,"clone","","",8],[6,"Item","",""],[11,"next","","",8],[11,"size_hint","","",8],[11,"next_back","","",8],[11,"clone","","",9],[6,"Item","",""],[11,"next","","",9],[11,"size_hint","","",9],[11,"next_back","","",9],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","","",7],[11,"clone","","",10],[6,"Item","",""],[11,"next","","",10],[11,"size_hint","","",10],[11,"next_back","","",10],[11,"clone","","",11],[6,"Item","",""],[11,"next","","",11],[11,"size_hint","","",11],[11,"next_back","","",11]],"paths":[[3,"TreeMap"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoRange"],[3,"Range"],[3,"RangeMut"],[3,"TreeSet"],[3,"IntoIter"],[3,"Iter"],[3,"IntoRange"],[3,"Range"]]};
initSearch(searchIndex);
